#include <stdio.h>
#include <limits.h>

#define MAX_CITIES 100
#define INF INT_MAX

void bellmanFord(int num_cities, int source, int adjMatrix[MAX_CITIES][MAX_CITIES], int distances[MAX_CITIES]) {
    // Initialize distances
    for (int i = 0; i < num_cities; ++i) {
        distances[i] = INF;
    }
    distances[source] = 0;

    // Relax edges repeatedly
    for (int iter = 1; iter <= num_cities - 1; ++iter) {
        for (int u = 0; u < num_cities; ++u) {
            for (int v = 0; v < num_cities; ++v) {
                int weight = adjMatrix[u][v];
                if (weight != -1 && distances[u] != INF && distances[u] + weight < distances[v]) {
                    distances[v] = distances[u] + weight;
                }
            }
        }
    }
}

int main() {
    int num_cities, source;
    printf("Enter the number of cities: ");
    scanf("%d", &num_cities);

    int adjMatrix[MAX_CITIES][MAX_CITIES];
    printf("Enter the adjacency matrix (use -1 for no connection):\n");
    for (int i = 0; i < num_cities; ++i) {
        for (int j = 0; j < num_cities; ++j) {
            scanf("%d", &adjMatrix[i][j]);
        }
    }

    printf("Enter the source city (0 to %d): ", num_cities - 1);
    scanf("%d", &source);

    int distances[MAX_CITIES];
    bellmanFord(num_cities, source, adjMatrix, distances);

    printf("Shortest distances from city %d to all other cities:\n", source);
    for (int i = 0; i < num_cities; ++i) {
        if (distances[i] == INF) {
            printf("City %d is not reachable from the source\n", i);
        } else {
            printf("City %d: %d\n", i, distances[i]);
        }
    }

    return 0;
}



OUTPUT:
Enter the number of cities: 5
Enter the adjacency matrix (use -1 for no connection):
0 -1 -1 3 2
-1 0 -1 4 1
-1 -1 0 6 -1
-1 -1 -1 0 3
-1 -1 -1 -1 0
Enter the source city (0 to 4): 0
Shortest distances from city 0 to all other cities:
City 0: 0
City 1 is not reachable from the source
City 2 is not reachable from the source
City 3: 3
City 4: 2
